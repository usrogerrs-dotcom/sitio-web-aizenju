---
const {
  bg = 'https://images.unsplash.com/photo-1519710164239-da123dc03ef4?q=80&w=1920&auto=format&fit=crop',
  setup = 'https://images.unsplash.com/photo-1519389950473-47ba0277781c?q=80&w=1600&auto=format&fit=crop',
  person = 'https://images.unsplash.com/photo-1587614203976-365c74645e83?q=80&w=1200&auto=format&fit=crop',
  // Velocidades de parallax (px por unidad de scroll normalizada)
  bgSpeed = 0.18,
  midSpeed = 0.42,
  frontSpeed = 0.08,
  // Posicionamiento por capa (CSS background-position)
  bgPos = 'center center',
  midPos = 'center 60%',
  frontPos = 'center 80%',
  // Texto opcional para integrar en la escena
  heading = '',
  subtext = '',
} = Astro.props;
---
<section class="parallax" aria-label="Transición con efecto de profundidad">
  <div class="layer layer--bg" style={`--img:url(${JSON.stringify(bg)}); --pos:${bgPos}`} data-speed={String(bgSpeed)}></div>
  <div class="layer layer--mid" style={`--img:url(${JSON.stringify(setup)}); --pos:${midPos}`} data-speed={String(midSpeed)}></div>
  { (heading || subtext) && (
    <div class="layer layer--text" data-speed="0.12">
      <div class="caption">
        {heading && <h2 class="caption__title">{heading}</h2>}
        {subtext && <p class="caption__text">{subtext}</p>}
      </div>
    </div>
  ) }
  <div class="layer layer--front" style={`--pos:${frontPos}`}>
    <img class="silhouette" src={person} alt="Estudiante en silla ergonómica" loading="lazy" data-speed={String(frontSpeed)} />
  </div>
</section>

<script is:inline>
  const sectionEl = document.currentScript && document.currentScript.closest ? document.currentScript.closest('.parallax') : document.querySelector('.parallax');
  /**
   * Clamp a number between two bounds.
   * @param {number} n
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  /** @param {number} n @param {number} a @param {number} b */
  const clamp = (n, a, b) => Math.max(a, Math.min(b, n));
  /**
   * Linear interpolation between a and b by t.
   * @param {number} a
   * @param {number} b
   * @param {number} t
   * @returns {number}
   */
  /** @param {number} a @param {number} b @param {number} t */
  const lerp = (a, b, t) => a + (b - a) * t;

  const onScroll = () => {
    const y = window.scrollY;
    // Capas de fondo/media con data-speed
    (document.querySelectorAll('.parallax .layer[data-speed]')).forEach((el) => {
      const speed = parseFloat(el.getAttribute('data-speed') || '0');
      el.setAttribute('style', `${el.getAttribute('style')}; --ty:${(y * speed * -0.25).toFixed(2)}px`);
      /** @type {HTMLElement} */ (el).style.transform = `translate3d(0, var(--ty), 0)`;
    });

    // Progreso de la sección en viewport para animaciones coreografiadas
    if (sectionEl) {
      const rect = sectionEl.getBoundingClientRect();
      const vh = window.innerHeight || document.documentElement.clientHeight;
      // progreso 0->1 cuando la sección entra y se recorre
      const top = clamp(1 - (rect.top / vh), -0.2, 1.2); // margen extra
      const bottom = clamp(1 - ((rect.bottom - vh) / vh), 0, 1);
      const progress = clamp((top + bottom) * 0.5, 0, 1);

      // Zoom en capa media: 1.03 -> 1.18 aprox con easing suave
      /** @param {number} t */
      const ease = (t) => 1 - Math.pow(1 - t, 3);
      const z = lerp(1.03, 1.18, ease(progress));
      /** @type {HTMLElement|null} */
      const mid = document.querySelector('.parallax .layer--mid');
      if (mid) (mid).style.transform = `translate3d(0, var(--ty, 0px), 0) scale(${z.toFixed(3)})`;

      /** @type {HTMLElement|null} */
      const bgEl = document.querySelector('.parallax .layer--bg');
      if (bgEl) (bgEl).style.opacity = String(lerp(1, 0.75, ease(progress)).toFixed(3));
      if (mid) (mid).style.opacity = String(lerp(0.9, 1, ease(progress)).toFixed(3));

      // Texto: aparece más temprano, mayor contraste, y se desplaza levemente hacia arriba
      const txt = document.querySelector('.parallax .layer--text .caption');
      if (txt) {
        const tText = clamp((progress - 0.1) / 0.3, 0, 1);
        const eText = ease(tText);
        const tyText = lerp(16, 0, eText); // 16% -> 0%
        (txt).style.color = `rgba(255,255,255, ${lerp(0.5, 1, eText).toFixed(3)})`;
        (txt).style.transform = `translateY(${tyText}%)`;
      }

      // Silueta: emerger desde abajo y posicionarse hacia la derecha en el espacio del setup
      /** @type {HTMLElement|null} */
      const sil = document.querySelector('.parallax .silhouette[data-speed]');
      if (sil) {
        const s = parseFloat(sil.getAttribute('data-speed') || '0');
        // Iniciar antes para que sea más perceptible (0.45 -> 0.8)
        const t = clamp((progress - 0.45) / 0.35, 0, 1);
        const op = lerp(0, 1, ease(t));
        const base = 36; // inicia un poco más abajo
        const target = 8; // más arriba al finalizar
        const ty = lerp(base, target, ease(t));
        // Parallax leve + desplazamiento coreografiado
        const ypx = (y * s * -0.15);
        // Offset horizontal hacia la derecha para ocupar el área libre del setup
        const vw = window.innerWidth || document.documentElement.clientWidth;
        const xpx = Math.min(160, Math.max(48, vw * 0.12));
        (sil).style.opacity = String(op);
        (sil).style.transform = `translate3d(${xpx.toFixed(0)}px, calc(${ty}% + ${ypx.toFixed(2)}px), 0)`;
      }
    }
  };
  let ticking = false;
  const rafScroll = () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        onScroll();
        ticking = false;
      });
      ticking = true;
    }
  };
  if (typeof window !== 'undefined') {
    onScroll();
    window.addEventListener('scroll', rafScroll, { passive: true });
  }
</script>

<style>
  .parallax {
    position: relative;
    height: 120vh;
    overflow: hidden;
    background: #0b0c0e;
    border-top: 1px solid rgba(255,255,255,0.06);
    border-bottom: 1px solid rgba(255,255,255,0.06);
  }

  .layer {
    position: absolute;
    inset: 0;
    background-image: var(--img);
    background-size: cover;
    background-position: var(--pos, center);
    will-change: transform;
    transform: translate3d(0,0,0);
  }

  .layer--bg { filter: brightness(0.9) saturate(0.9); }

  .layer--mid {
    mix-blend-mode: screen;
    opacity: 0.9;
    transform-origin: center;
  }

  .layer--front {
    position: absolute;
    inset: 0;
    display: grid;
    /* colocar la silueta en la esquina inferior derecha */
    place-items: end end;
    pointer-events: none;
  }

  .silhouette {
    width: min(46vw, 600px);
    max-width: 92%;
    filter: drop-shadow(0 24px 48px rgba(0,0,0,0.55)) saturate(0.95);
    transform: translateY(30%);
    opacity: 0;
    transition: transform 400ms cubic-bezier(.2,.7,.2,1), opacity 350ms ease;
    will-change: transform, opacity;
    position: relative;
  }
  .silhouette::after {
    content: ""; position: absolute; inset: -6% -4% -2% -4%; pointer-events: none;
    background: radial-gradient(60% 40% at 50% 80%, rgba(124,58,237,0.15), transparent 60%);
    filter: blur(18px);
  }

  /* Animación CSS eliminada: la aparición se controla con scroll en JS */

  @media (max-width: 720px) {
    .parallax { height: 100vh; }
    .silhouette { width: min(62vw, 420px); }
  }

  /* Título y texto sobre la capa de texto */
  .layer--text .caption {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: grid;
    place-items: start;
    text-align: left;
  }
  .layer--text .caption__title {
    font-size: clamp(2.4rem, 7.2vw, 5.8rem);
    line-height: 0.95;
    margin: 0 0 8px;
    color: #ffffff;
    text-shadow: 0 6px 40px rgba(0,0,0,0.5), 0 2px 12px rgba(0,0,0,0.35);
    letter-spacing: 0.02em;
  }
  .layer--text .caption__text {
    max-width: 820px;
    font-size: clamp(1rem, 2.2vw, 1.25rem);
    color: var(--muted);
    text-shadow: 0 1px 8px rgba(0,0,0,0.25);
  }
  @media (max-width: 720px) {
    .layer--text .caption__title { font-size: clamp(2rem, 9vw, 3rem); }
    .layer--text .caption__text { font-size: 1rem; }
  }
</style>
